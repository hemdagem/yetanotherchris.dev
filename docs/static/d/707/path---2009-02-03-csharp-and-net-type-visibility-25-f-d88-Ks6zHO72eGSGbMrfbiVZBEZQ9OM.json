{"data":{"site":{"siteMetadata":{"title":"Another Chris","author":"Chris Small"}},"markdownRemark":{"id":"a3b7efca-a6b3-5306-a872-72bc76373817","excerpt":"Classes and Structs Classes and structs allow the following type visibility options in C#: public Viewable by all types in the current and referencing…","html":"<h2>Classes and Structs</h2>\n<p>Classes and structs allow the following type visibility options in C#:</p>\n<h3>public</h3>\n<p>Viewable by all types in the current and referencing assemblies.</p>\n<h3>internal</h3>\n<p>Viewable by types in the current assembly only.</p>\n<p>For example:</p>\n<!--more-->\n<pre>public struct PublicStruct {}\ninternal struct InternalStruct {}\nstruct DefaultStruct {} // internal by default\npublic class MyPublic {}\ninternal class MyInternal {}\nclass DefaultClass {} // internal by default\n</pre>\n<p>in terms of IL output, you either get the tokens [public] or [notpublic] used in the TypeDef metadata table. That is:</p>\n<pre>TypDefName: MyNamespace.PublicStruct (02000003)\nFlags : [Public] [SequentialLayout] [Class] [Sealed] [AnsiClass] [BeforeFieldInit] (00100109)\nTypDefName: MyNamespace.InternalStruct (02000004)\nFlags : [NotPublic] [SequentialLayout] [Class] [Sealed] [AnsiClass] [BeforeFieldInit] (00100108)\n</pre>\n<p>You will notice the [sealed] keyword above. All structs are sealed as there’s no inheritence between value types, as side from the built in FCL ones such as Enum, Void, Nullable.</p>\n<p>The following rules also apply:</p>\n<ul>\n<li>Classes allow for the sealed and abstract keywords ontop of the access modifiers.</li>\n<li>Classes can be marked as static. This restricts its members to being static only, and the class is instantiated when the appdomain loads.</li>\n<li>The partial keyword is also possible which has its uses within source control.</li>\n<li>Classes and structs are internal by default. Enum members are public.</li>\n</ul>\n<h2>Nested Types</h2>\n<p>You get one extra modifier for nested types (class,struct,enum,interface), the private keyword. For example:</p>\n<p><div id=\"gist4746383\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-gistfile1-cs\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-c \">\n      \n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\">\n      <tr>\n        <td id=\"file-gistfile1-cs-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"></td>\n        <td id=\"file-gistfile1-cs-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">internal</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">FooBarDaddy</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"></td>\n        <td id=\"file-gistfile1-cs-LC2\" class=\"blob-code blob-code-inner js-file-line\">{</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"></td>\n        <td id=\"file-gistfile1-cs-LC3\" class=\"blob-code blob-code-inner js-file-line\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> <span class=\"pl-en\">Run</span>()</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"></td>\n        <td id=\"file-gistfile1-cs-LC4\" class=\"blob-code blob-code-inner js-file-line\">\t{</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"></td>\n        <td id=\"file-gistfile1-cs-LC5\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-en\">Foobar1</span> <span class=\"pl-smi\">fb</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-en\">Foobar1</span>();</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\"></td>\n        <td id=\"file-gistfile1-cs-LC6\" class=\"blob-code blob-code-inner js-file-line\">\t}</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L7\" class=\"blob-num js-line-number\" data-line-number=\"7\"></td>\n        <td id=\"file-gistfile1-cs-LC7\" class=\"blob-code blob-code-inner js-file-line\">\t</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L8\" class=\"blob-num js-line-number\" data-line-number=\"8\"></td>\n        <td id=\"file-gistfile1-cs-LC8\" class=\"blob-code blob-code-inner js-file-line\">\t<span class=\"pl-c\"><span class=\"pl-c\">///</span> Only accessible inside FooBarDaddy</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L9\" class=\"blob-num js-line-number\" data-line-number=\"9\"></td>\n        <td id=\"file-gistfile1-cs-LC9\" class=\"blob-code blob-code-inner js-file-line\">\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">Foobar1</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L10\" class=\"blob-num js-line-number\" data-line-number=\"10\"></td>\n        <td id=\"file-gistfile1-cs-LC10\" class=\"blob-code blob-code-inner js-file-line\">\t{</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L11\" class=\"blob-num js-line-number\" data-line-number=\"11\"></td>\n        <td id=\"file-gistfile1-cs-LC11\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">///</span> Only accessible inside Foobar1</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L12\" class=\"blob-num js-line-number\" data-line-number=\"12\"></td>\n        <td id=\"file-gistfile1-cs-LC12\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">interface</span> <span class=\"pl-en\">IFoo</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L13\" class=\"blob-num js-line-number\" data-line-number=\"13\"></td>\n        <td id=\"file-gistfile1-cs-LC13\" class=\"blob-code blob-code-inner js-file-line\">\t\t{</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L14\" class=\"blob-num js-line-number\" data-line-number=\"14\"></td>\n        <td id=\"file-gistfile1-cs-LC14\" class=\"blob-code blob-code-inner js-file-line\">\t\t}</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L15\" class=\"blob-num js-line-number\" data-line-number=\"15\"></td>\n        <td id=\"file-gistfile1-cs-LC15\" class=\"blob-code blob-code-inner js-file-line\">\t</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L16\" class=\"blob-num js-line-number\" data-line-number=\"16\"></td>\n        <td id=\"file-gistfile1-cs-LC16\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-c\"><span class=\"pl-c\">///</span> Only accessible inside Foobar1</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L17\" class=\"blob-num js-line-number\" data-line-number=\"17\"></td>\n        <td id=\"file-gistfile1-cs-LC17\" class=\"blob-code blob-code-inner js-file-line\">\t\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">struct</span> <span class=\"pl-en\">Foobar2</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L18\" class=\"blob-num js-line-number\" data-line-number=\"18\"></td>\n        <td id=\"file-gistfile1-cs-LC18\" class=\"blob-code blob-code-inner js-file-line\">\t\t{</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L19\" class=\"blob-num js-line-number\" data-line-number=\"19\"></td>\n        <td id=\"file-gistfile1-cs-LC19\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t<span class=\"pl-c\"><span class=\"pl-c\">///</span> Only accessible inside Foobar2</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L20\" class=\"blob-num js-line-number\" data-line-number=\"20\"></td>\n        <td id=\"file-gistfile1-cs-LC20\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">struct</span> <span class=\"pl-en\">Foobar3</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L21\" class=\"blob-num js-line-number\" data-line-number=\"21\"></td>\n        <td id=\"file-gistfile1-cs-LC21\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t{</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L22\" class=\"blob-num js-line-number\" data-line-number=\"22\"></td>\n        <td id=\"file-gistfile1-cs-LC22\" class=\"blob-code blob-code-inner js-file-line\">\t\t\t}</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L23\" class=\"blob-num js-line-number\" data-line-number=\"23\"></td>\n        <td id=\"file-gistfile1-cs-LC23\" class=\"blob-code blob-code-inner js-file-line\">\t\t}</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L24\" class=\"blob-num js-line-number\" data-line-number=\"24\"></td>\n        <td id=\"file-gistfile1-cs-LC24\" class=\"blob-code blob-code-inner js-file-line\">\t}</td>\n      </tr>\n      <tr>\n        <td id=\"file-gistfile1-cs-L25\" class=\"blob-num js-line-number\" data-line-number=\"25\"></td>\n        <td id=\"file-gistfile1-cs-LC25\" class=\"blob-code blob-code-inner js-file-line\">}</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/yetanotherchris/4746383/raw/9610bb4b6bb1b6c443ed251dd99f716890618146/gistfile1.cs\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/yetanotherchris/4746383#file-gistfile1-cs\">gistfile1.cs</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<h2>Properties / Methods / Events / Fields</h2>\n<h3>private</h3>\n<p>Accessible by methods in the class/struct and nested types.</p>\n<h3>protected</h3>\n<p>Accessible by methods in the class, nested types, or derived type (regardless of assembly)</p>\n<h3>internal</h3>\n<p>Accessible by all methods in the current assembly only.</p>\n<h3>protected internal</h3>\n<p>Accessible by methods in derived types (any assembly), and any method of any type in the current assembly.</p>\n<h3>public</h3>\n<p>Accessible by all methods in all assemblies.</p>\n<h3>“almost-internal protected” (family and friend in CLR)</h3>\n<p>(This doesn’t exist in C# but exists inside the CLR.)<br>\nAccessible by methods in the class/struct, nested types, and derived types in the current assembly. This is almost identical to internal except it’s this/derived/nested types only, rather than any type.</p>\n<h3>All members are private by default.</h3>\n<p>For interface implentations, members are forced to public by the C# compiler unless defined as explicit.</p>\n<h2>Ontop of the visibility options</h2>\n<ul>\n<li>Methods can also be marked as extern, usually coinciding with importing of win32 libraries. For example using SendMessage.</li>\n<li>Methods and fields (but not properties,events) can be marked as volatile.</li>\n<li>Methods, fields and properties can be marked with static.</li>\n</ul>\n<h2>Methods, events and properties can be marked with</h2>\n<ul>\n<li>abstract</li>\n<li>new</li>\n<li>override</li>\n<li>virtual</li>\n</ul>\n<p>You will find that the C# compiler uses the IL callvirt op by default, which calls a method virtually checking if the object variable is null first.</p>\n<h2>Fields can additionally be</h2>\n<ul>\n<li>const</li>\n<li>readonly</li>\n</ul>\n<h2>Sharing internal members accross assemblies</h2>\n<p>This is a very useful trick for unit tests. If you have one assembly that performs all your unit tests and another assembly, say a data access layer, in another assembly you typically can’t test some of the 2nd assembly’s internal types in a unit test as they won’t be accessible. You can get around this by adding the following line to your AssemblyInfo.cs</p>\n<pre>[assembly:InternalsVisibleTo(\"Type,PublicKey=xxx\")]</pre>","frontmatter":{"title":"C# and .NET type visibility","date":"February 03, 2009","description":"This post is a reference article about visibility in C# and .NET."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2009-02-03-csharp-and-net-type-visibility/","previous":{"fields":{"slug":"/2009-02-02-unix-cheat-sheet/"},"frontmatter":{"title":"Unix Cheat Sheet"}},"next":{"fields":{"slug":"/2009-02-10-csharp-design-patterns-the-mediator-pattern/"},"frontmatter":{"title":"C# Design Patterns: the Mediator pattern"}}}}