{"data":{"site":{"siteMetadata":{"title":"Another Chris","author":"Chris Small"}},"markdownRemark":{"id":"d2ebe659-cc5d-5ef4-ae87-ac0f0960127e","excerpt":"This post is a command reference card for some regularly used unix commands, tested on linux (Rdhat 6, a while ago) but should hopefully work on most unix…","html":"<p><img src=\"http://imgs.xkcd.com/comics/tar.png\" alt=\"unix tar\"></p>\n<p>This post is a command reference card for some regularly used unix commands, tested on linux (Rdhat 6, a while ago) but should hopefully work on most unix command shells. Any additional (non-obscure) commands you think should be added,or corrections please email me.</p>\n<!--more-->\n<h3>Docker</h3>\n<ul>\n<li><code class=\"language-text\">docker rm -f $(docker ps -a -q)</code> - removes all containers, forcing them to stop (-q is Windows friendly)</li>\n<li><code class=\"language-text\">docker rmi $(docker images -q)</code> - removes all images.</li>\n<li><code class=\"language-text\">docker cp nginx:/usr/share/nginx/key.pem key.pem</code> - copies the pem file onto the nginx container from the current directory (this can be used to copy the other way round too).</li>\n</ul>\n<h3>Nginx</h3>\n<p>To get a free SSL certificate for your site (expires in 90 days);</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">wget https://dl.eff.org/certbot-auto chmod a+x certbot-auto ./path/to/certbot-auto certonly --standalone -d example.com -d www.example.com</code></pre></div>\n<p>You can then use it in your nginx conf file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ssl_certificate /usr/share/nginx/keys/vac-ation.com/cert.pem;\nssl_certificate_key /usr/share/nginx/keys/vac-ation.com/privatekey.pem;</code></pre></div>\n<h3>Sudo</h3>\n<p>To edit the sudo file in bash (install Nano first, apt-get install nano or yum install nano):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">export VISUAL=nano\ncrontab -e </code></pre></div>\n<h3>General help</h3>\n<p>[command] -help - gives syntax for using that command</p>\n<ul>\n<li><code class=\"language-text\">man [command]</code> - brings up the manual page for the command, if it exists</li>\n<li><code class=\"language-text\">man [command] &gt; file.txt</code> - dumps the manual page(s) for the command into ‘file.txt’</li>\n<li><code class=\"language-text\">whatis [command]</code> - gives a short description of the command.</li>\n<li><code class=\"language-text\">help</code> - gives a list of commands (GNU Bash).</li>\n<li><code class=\"language-text\">help [command]</code> - gives extra information on the commands listed above.</li>\n</ul>\n<h3>General text editing/viewing</h3>\n<ul>\n<li><code class=\"language-text\">pico [filename]</code> - launches the PICO editor for the filename.</li>\n<li><code class=\"language-text\">nano [filename]</code> - does anyone use PICO anymore?</li>\n<li><code class=\"language-text\">more [filename]</code> - shows one screen’s worth of the file at a time.</li>\n<li><code class=\"language-text\">less [filename]</code> - similar to more</li>\n<li><code class=\"language-text\">head [filename]</code> - Shows the first 10 lines of file, or use <code class=\"language-text\">-n</code> for the number of lines.</li>\n<li><code class=\"language-text\">tail [filename]</code> - Shows the last 10 lines of file, or use <code class=\"language-text\">-n</code> for the number of lines.</li>\n<li><code class=\"language-text\">cat [filename] | more</code> - works like more, <code class=\"language-text\">cat</code> concats 2 strings</li>\n<li>\n<p><code class=\"language-text\">sed &#39;s|search string|replace string|&#39; filename &gt; newfile.txt</code> - replaces a string inside a file.</p>\n<ul>\n<li><code class=\"language-text\">|</code> is the delimiter here, but it can be anything to avoid clashes.</li>\n</ul>\n</li>\n</ul>\n<h3>Nano</h3>\n<ul>\n<li>alt+a to select all.</li>\n<li>ctrl+k to cut</li>\n<li>alt+u to paste</li>\n<li><em>(All other CTRL commands should be self-explanatory)</em></li>\n</ul>\n<h3>VI</h3>\n<ul>\n<li><code class=\"language-text\">vi [filename]</code> - opens VI text editor, if the file doesn’t exist, it’ll be created on saving.</li>\n<li>using <code class=\"language-text\">i</code> inserts</li>\n<li>pressing <code class=\"language-text\">escape</code> and then <code class=\"language-text\">:</code> goes back to command mode.</li>\n<li><code class=\"language-text\">/searchstring</code> searchs for <code class=\"language-text\">searchstring</code> using regular expressions.</li>\n<li><code class=\"language-text\">:</code> followed by <code class=\"language-text\">w</code> writes</li>\n<li><code class=\"language-text\">:</code> followed by <code class=\"language-text\">qw</code> writes then quits</li>\n<li><code class=\"language-text\">:</code> followed by <code class=\"language-text\">q</code> quits.</li>\n<li><code class=\"language-text\">:</code> followed by <code class=\"language-text\">q!</code> quits regardless of whether changes are made.</li>\n<li><code class=\"language-text\">:</code> followed by <code class=\"language-text\">z</code> undos.</li>\n</ul>\n<h3>SSH</h3>\n<ul>\n<li><code class=\"language-text\">ssh root@1.2.3.4</code> - SSH onto a server (use git bash for Windows for this)</li>\n<li><code class=\"language-text\">scp root@1.2.3.4:localfile.txt /etc/remotefile.txt</code> - copy localfile.txt to /etc/remotefile.txt</li>\n<li><code class=\"language-text\">scp root@1.2.3.4:/root/privatekey.pem privatekey.pem</code> - copy privatekey.pem onto your server</li>\n</ul>\n<h3>General/System commands</h3>\n<ul>\n<li><code class=\"language-text\">su [user]</code> - changes the login to <code class=\"language-text\">[user]</code> or to the root if no <code class=\"language-text\">[user]</code> is given.</li>\n<li><code class=\"language-text\">date</code> - shows the system date</li>\n<li><code class=\"language-text\">whoami</code> - tells you who you’re logged in as</li>\n<li><code class=\"language-text\">uptime</code> - how long the computer has been running, plus other details</li>\n<li><code class=\"language-text\">w</code> - shows who’s logged on, what they’re doing.</li>\n<li><code class=\"language-text\">df</code> - how much disk space is left.</li>\n<li><code class=\"language-text\">du</code> - disk usage by your login, it can also total up directories.</li>\n<li><code class=\"language-text\">uname -mrs</code> - userful info about the system</li>\n<li><code class=\"language-text\">uname -a</code> - all details about the system</li>\n</ul>\n<h3>What’s running</h3>\n<ul>\n<li><code class=\"language-text\">ps</code> - what’s running.</li>\n<li><code class=\"language-text\">ps</code> ax - shows all processes</li>\n<li><code class=\"language-text\">top</code> - sort of interactive version of ps, there is also <code class=\"language-text\">ntop</code>.</li>\n<li><code class=\"language-text\">kill [pid]</code> - terminates the named process, which can be name or number or other options.</li>\n<li><code class=\"language-text\">killall -HUP [command name]</code> - kill a process, running the command specified, by name.</li>\n<li><code class=\"language-text\">killall -9 [command]</code> - similar to the above</li>\n<li><code class=\"language-text\">xkill</code> - kills a frozen application in X (gnome,kde etc. desktops), you just click on the frozen app.</li>\n</ul>\n<h3>File system</h3>\n<ul>\n<li><code class=\"language-text\">ls -la</code> - list all files/directories</li>\n<li><code class=\"language-text\">dir</code> - simple form of ls</li>\n<li><code class=\"language-text\">cd [dir]</code> - change directory</li>\n<li><code class=\"language-text\">cd ~</code> - go back to the home directory</li>\n<li><code class=\"language-text\">cdup</code> - similar to using <code class=\"language-text\">cd ..</code>, go up one directory.</li>\n<li><code class=\"language-text\">pwd</code> - print which directory you’re in.</li>\n<li><code class=\"language-text\">./[filename]</code> - run the file if it’s executable and in the current directory.</li>\n<li><code class=\"language-text\">rm [filename]</code> - delete a file</li>\n<li><code class=\"language-text\">rm -R [directory]</code> - delete a directory</li>\n<li><code class=\"language-text\">mv [oldfilename] [newfilename]</code> - renames the file (or directory)</li>\n<li><code class=\"language-text\">cp [filename-source] [filename-destination]</code> - copy the file from one place to another</li>\n<li><code class=\"language-text\">cp -R [dir-source] [dir-destination]</code> - copy a directory an all its subdirectories</li>\n<li><code class=\"language-text\">mkdir [name]</code> - makes a directory.</li>\n<li><code class=\"language-text\">cat [sourcefile] &gt;&gt; [destinationfile]</code> - appends sourcefile to the end of destinationfile</li>\n<li><code class=\"language-text\">df</code> - how much disk space is available, more options available.</li>\n</ul>\n<h3>Zipping/taring</h3>\n<ul>\n<li><code class=\"language-text\">tar -cvzf mytar.tar.gz [sourcefiles-or-dir]</code> - creates a new tar file, verbose options on, runs it through gnuzip,f is the filename</li>\n<li><code class=\"language-text\">tar -xvf mytar.tar.gz [destination]</code> - extracts a tar file (this example is compressed with gzip), verbosely, f is the filename</li>\n<li><code class=\"language-text\">gzip [file-or-dir]</code> - compresses a file with gzip.</li>\n<li><code class=\"language-text\">gunzip file.gz</code> - decompresses a file with gzip.</li>\n<li><code class=\"language-text\">unzip file</code> - unzips a file (you’ll need to apt-get install unzip)</li>\n</ul>\n<p>NB gzip only compresses files, it doesn’t collect them into a single file like a tarball does.</p>\n<h3>Searching</h3>\n<ul>\n<li><code class=\"language-text\">locate [filename]</code> - searches the system using an indexed database of files. use updatedb to update the file database</li>\n<li><code class=\"language-text\">locate [filename] | sort</code> - sorts the files alphabetically</li>\n<li><code class=\"language-text\">whereis [filename]</code> - locates an application, such as ‘whereis bash’</li>\n<li><code class=\"language-text\">find [filename]</code> - searches the filesystem as with locate, but without a database so its slower.</li>\n<li><code class=\"language-text\">find /directory -atime +30 -print</code> - searches for files not used in the past 30 days.</li>\n</ul>\n<h3>Setting up links</h3>\n<ul>\n<li><code class=\"language-text\">ln -s target linkname</code> - creates a symbolic link, like a shortcut to the target directory or filename.</li>\n<li><code class=\"language-text\">ln target linkname</code> - creates the default hard link. Deleting this will delete the targetted file or directory.</li>\n</ul>\n<h3>Network commands</h3>\n<ul>\n<li><code class=\"language-text\">dig domainname</code> - retrieves information about a domain, such as name servers, mx records</li>\n<li><code class=\"language-text\">whois domainname</code> - whois info on a domain</li>\n<li><code class=\"language-text\">finger user</code> - gives info about a user, their group status, but can also be used over a network</li>\n<li><code class=\"language-text\">netstat -ape</code> - lots of info about whos connected to your machine, what processes are doing what with sockets</li>\n</ul>\n<h3>Piping</h3>\n<p>Piping to another command is straight forward enough:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">locate filename | grep /usr/local &gt; searchresults.txt\n\nThis searches for filename, runs the results through grep to filter everything without /usr/local in it, and then outputs the results to searchresults.txt\n\n|  - runs one application via another, and can be used multiple times e.g. cat /usr/group | more | grep root | sort.\n&gt;  - creates a new file if one doesn&#39;t already exist, overwrites the contents of the file if it does exist   \n&gt;&gt; - appends to the end of the file, and creates the file if one doesn&#39;t exist.   \n&lt;  - sends everything after this to the application, e.g. ./mysql -u bob -p databasename &lt; mysqldump.sql </code></pre></div>\n<h3>Users and groups</h3>\n<ul>\n<li><code class=\"language-text\">groups [username]</code> - shows what groups the user belongs to</li>\n<li><code class=\"language-text\">id [username]</code> - shows extended information about a user.</li>\n<li><code class=\"language-text\">finger [user]</code> - give details about a user.</li>\n<li><code class=\"language-text\">passwd [user]</code> - changes the password for a user, or without the user argument, changes your password.</li>\n<li><code class=\"language-text\">chsh [user]</code> - changes the shell for a user.</li>\n<li><code class=\"language-text\">userdel [user]</code> - removes a user from the system, use -r to remove their home directory too.</li>\n<li><code class=\"language-text\">newgrp [group id]</code> - log into a new group.</li>\n<li><code class=\"language-text\">groupadd [groupname]</code> - adds a group</li>\n<li><code class=\"language-text\">usermod -a -G [group-name] [user-name]</code> - adds a user to a group</li>\n<li><code class=\"language-text\">useradd -d /home/username -g groupname username</code> - add a new user with the d being the homedirectory, g the default group they belong to.</li>\n<li><code class=\"language-text\">sudo adduser &lt;username&gt; sudo</code> - add a user to the user of sudos</li>\n</ul>\n<p>Take a look at the users/groups on the system with:</p>\n<ul>\n<li><code class=\"language-text\">cat /etc/passwd | sort</code></li>\n<li><code class=\"language-text\">cat /etc/group | sort</code></li>\n</ul>\n<p>The stuff below is in the man pages also.</p>\n<p>The format of passwd is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">username  \npassword denoted by x (use cat /etc/shadow | sort to list the shadow password file)  \nuid - user identifier number  \ngid - group identifier number  \nmisc information such as real name  \nusers home directory  \nshell for the user</code></pre></div>\n<p>The format of group is:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name of group  \npassword denoted by x (use cat /etc/gshadow | sort to list the shadow group file)  \ngid - group identifier number  \nlist of additional users assigned to the group</code></pre></div>\n<h3>File and directory permissions</h3>\n<p>Break down of permissions in a directory listing:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-rw-r--r-- 1 mainuser devel 9054 Dec 28 12:42 index.html</code></pre></div>\n<ul>\n<li>The first character indicates whether it is a directory or file (d for directory).</li>\n<li>After that, the next 3 (rw-) are owner permissions.</li>\n<li>The following 3 (r-) are group permissions</li>\n<li>The following 3(r-) are permissions for other users.</li>\n</ul>\n<p>After that reads the number of files inside the directory if it’s a directory (which it isn’t so it’s 1) this can also be links to the file, the owner of the file, the group the file belongs to, size in bytes, date and time and then the filename.</p>\n<h3>Chmod and Chown</h3>\n<p>Owner,group and other permissions can be r,w,x. Translated into their decimal equivalents:</p>\n<ul>\n<li><code class=\"language-text\">owner-read=400,write=200,execute=100</code></li>\n<li><code class=\"language-text\">group-read=40,write=20,execute=10</code></li>\n<li><code class=\"language-text\">other-read=4,write=2,execute=1</code></li>\n</ul>\n<p>So add them up and you’ve got your user permissions for chmoding:</p>\n<ul>\n<li><code class=\"language-text\">chmod [mode] fileordirectory</code> - changes the permissions on a file or directory. use -r to recursively change a whole directory and its sub directories.</li>\n</ul>\n<p>e.g chmod 755 myfile.txt - changes the permissions on the file to 755 which is : owner read,write,execute; group read,execute; other read,execute.</p>\n<ul>\n<li><code class=\"language-text\">chown [user:group] fileordirectory</code> - changes the user and group ownership of a file or directory. Use -R to recursively change a whole directory and its sub directories.</li>\n<li><code class=\"language-text\">chgrp [group] fileordirectory</code> - changes the groupownership of a file or directory. Use -R to recursively change a whole directory and its sub directories.</li>\n</ul>\n<h2>Permissions calculator</h2>\n<script>\nfunction clearForm()\n{\nvar form = document.getElementById(\"unixcalculator\");\nfor (var i=0;i < form.elements.length;i++)\n`{`\t\tif (form.elements\\[i\\].type == \"checkbox\")\n`{`\t\t\tform.elements\\[i\\].checked = false;\n}\n}\n\n    form.unixpermission.value = \"\";\n\n}\n\nfunction makePermissions()\n{\nmode = 0;\nvar form = document.getElementById(\"unixcalculator\");\nfor (var i=0;i < form.elements.length;i++)\n{\nif (form.elements\\[i\\].type == \"checkbox\")\n{\nif (form.elements\\[i\\].checked == true)\n{\nmode += parseInt(form.elements\\[i\\].value);\n}\n}\n}\n\n    form.unixpermission.value = mode;\n\n}\n\nfunction reversePermissions()\n{\nvar form = document.getElementById(\"unixcalculator\");\nfor (var i=0;i < form.elements.length;i++)\n{\nif (form.elements\\[i\\].type == \"checkbox\")\n{\nform.elements\\[i\\].checked = false;\n}\n}\n\n    var form = document.getElementById(\"unixcalculator\");\n    var mode = parseInt(form.unixpermission.value);\n    for (var i=0;i < form.elements.length;i++)\n    {\n    \tif (form.elements[i].type == \"checkbox\")\n    \t{\n    \t\tvar val = parseInt(form.elements[i].value);\n    \t\tif (mode === val)\n    \t\t{\n    \t\t\tform.elements[i].checked = true;\n    \t\t\treturn;\n    \t\t}\n    \t}\n    }\n    \n    console.log(\"the mode is: \" +mode);\n    for (var i=0;i < form.elements.length;i++)\n    {\n    \tif (form.elements[i].type == \"checkbox\")\n    \t{\n    \t\tvar val = parseInt(form.elements[i].value);\n    \t\tvar newMode = mode - val;\n    \t\tconsole.log(\"new mode would be: \" +newMode);\n    \n    \t\tif (newMode >= 0)\n    \t\t{\n    \t\t\tform.elements[i].checked = true;\n    \t\t\tmode -= val;\n    \t\t}\n    \t\telse if (newMode === 0)\n    \t\t{\n    \t\t\treturn;\n    \t\t}\n    \t}\n    }\n\n}\n</script>\n<form id=\"unixcalculator\">\n<table width=\"500\" class=\"table table-bordered\">\n<thead>\n<tr>\n<th> </th>\n<th>Read</th>\n<th>Write</th>\n<th>Execute</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Owner</td>\n<td><input type=\"checkbox\" name=\"a1\" value=\"400\" /></td>\n<td><input type=\"checkbox\" name=\"a2\" value=\"200\" /></td>\n<td><input type=\"checkbox\" name=\"a3\" value=\"100\" /></td>\n</tr>\n<tr>\n<td>Group</td>\n<td><input type=\"checkbox\" name=\"b1\" value=\"40\" /></td>\n<td><input type=\"checkbox\" name=\"b2\" value=\"20\" /></td>\n<td><input type=\"checkbox\" name=\"b3\" value=\"10\" /></td>\n</tr>\n<tr>\n<td>Others</td>\n<td><input type=\"checkbox\" name=\"c1\" value=\"4\" /></td>\n<td><input type=\"checkbox\" name=\"c2\" value=\"2\" /></td>\n<td><input type=\"checkbox\" name=\"c3\" value=\"1\" /></td>\n</tr>\n<tr>\n<td colspan=\"4\" align=\"right\">Mode <input type=\"text\" name=\"unixpermission\" id=\"unixpermission\" /></td>\n</tr>\n<tr>\n<td colspan=\"4\" style=\"text-align:right\">\n<input type=\"button\" class=\"btn btn-primary\" name=\"Button\" value=\"Clear\" onclick=\"clearForm();\" />\n<input type=\"button\" class=\"btn btn-primary\" name=\"Button\" value=\"Calculate permissions\" onclick=\"makePermissions();\" />\n<input type=\"button\" class=\"btn btn-primary\" name=\"Button\" value=\"Show permissions\" onclick=\"reversePermissions();\" />\n</td>\n</tr>\n</tbody>\n</table>\n</form>","frontmatter":{"title":"Unix Cheat Sheet","date":"February 02, 2009","description":"This post is a command reference card for some regularly used unix commands, tested on linux (Redhat 6, a while ago) but should hopefully work on most unix command shells."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2009-02-02-unix-cheat-sheet/","previous":{"fields":{"slug":"/2009-01-28-csharp-design-patterns-the-strategy-pattern/"},"frontmatter":{"title":"C# Design patterns: the Strategy pattern"}},"next":{"fields":{"slug":"/2009-02-03-csharp-and-net-type-visibility/"},"frontmatter":{"title":"C# and .NET type visibility"}}}}