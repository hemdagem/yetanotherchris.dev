{"data":{"site":{"siteMetadata":{"title":"Another Chris","author":"Chris Small"}},"markdownRemark":{"id":"c7a16aa4-e350-5cc5-9e1a-d1e80484ee9d","excerpt":"I’ve been using Powershell on a daily basis for about 2 years now, mostly with Chocolatey and provisioning servers (the devops movement). Whilst it’s a huge…","html":"<p>I’ve been using Powershell on a daily basis for about 2 years now, mostly with Chocolatey and provisioning servers (the devops movement). Whilst it’s a huge improvement over batch files (anything is)  and VBS, it is has foibles. </p>\n<p>Infact it has so many foibles I would put it firmly in the languages-with-very-strange-design-decisions category reserved for <a href=\"https://www.google.co.uk/search?q=javascript+the+good+parts\">Javascript</a> and <a href=\"http://stackoverflow.com/questions/1995113/strangest-language-feature/1996314#1996314\">Perl</a>:</p>\n<ul>\n<li>The “number 1” stinker: the <code class=\"language-text\">.ps1</code> and <code class=\"language-text\">.psm1</code> file extensions. Did they think Powershell was only going to have one version?</li>\n<li>The same applies for the profile folder, it lived until recently inside Powershell1. Oh and there’s also <a href=\"https://blogs.technet.microsoft.com/heyscriptingguy/2012/05/21/understanding-the-six-powershell-profiles/\">6 different profile locations</a>.</li>\n<li><code class=\"language-text\">$true</code> and <code class=\"language-text\">$false</code> as constants</li>\n<li><code class=\"language-text\">$HOME</code> vs <code class=\"language-text\">~</code> vs <code class=\"language-text\">$env:HOME</code> (<a href=\"http://www.beefycode.com/post/The-Difference-Between-~-and-%24home.aspx\">explaination here</a>)</li>\n<li>Error handling. Do we <code class=\"language-text\">try {} catch</code>, <code class=\"language-text\">-ErrorAction</code>, <code class=\"language-text\">$ErrorActionPreference</code>, <code class=\"language-text\">2&gt;&amp;1</code>, <code class=\"language-text\">$LastExistCode</code>? I know there is a distinct difference between the four but it doesn’t make it any less nutty.</li>\n<li>Help docs. If I want help on a cmdlet I have to use <code class=\"language-text\">get-help invoke-webrequest</code> or the shortcut <code class=\"language-text\">man wget</code>, not just <code class=\"language-text\">-help</code></li>\n<li>…which leads onto unix shortcuts. They’re not unix shortcuts as they’re different commands with completely different syntaxes. For example wget, curl, ls.</li>\n<li>Functions. You declare them with brackets, you call them without.</li>\n</ul>\n<p>These are more minor quibbles:</p>\n<ul>\n<li>Inconsistently with semi colons at the end of the lines.</li>\n<li>Casting is a complete beast.</li>\n<li>String lookups/replacements are also not nice if you’re not familiar with the .NET framework.</li>\n<li>No easy way to log output, even with the transcript commands.</li>\n<li>A separate metadata file for modules - why not just use YAML (frontmatter) at the top or bottom of the file?</li>\n<li><code class=\"language-text\">-eq -neq -gt</code>. But there is actually a design decision behind this that makes sense, based on dash command line argument seperator and  having to maintain the > as a pipe.</li>\n</ul>\n<p>That sounds like a damning critique but really the only two features that get annoying on a daily basis are the error handling and the help. The shortcomings are in some ways countered by the good parts:</p>\n<ul>\n<li>Really easy to pickup if you’re from a .NET background.</li>\n<li>A familar Perl/PHP-like syntax for the variables and comments.</li>\n<li>You can use the .NET framework fairly easily: <code class=\"language-text\">C:\\&gt;[System.DateTime]::Now</code> (there’s a shortcut: <code class=\"language-text\">get-date</code>)</li>\n<li>You can alias commands easily</li>\n<li>Modules are easy to write.</li>\n<li>The CLI intellisense in Windows 10 is nice.</li>\n<li>The language is updated regularly, it’s not left to fester like batch.</li>\n<li>Chocolately and Boxstarter simplify a large portion of what you do.</li>\n</ul>\n<p>If you need to write infrastructure as code for Windows you’re a bit stuck as the alternatives to Powershell aren’t any better, they either lack the libraries Powershell has, or need to be compiled and aren’t familiar to cross-platform sys-ops. So for now I’m happy with Powershell but do enjoy a good British moan at it every so often.</p>","frontmatter":{"title":"Powershell - the good parts","date":"February 15, 2016","description":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016-02-15-powershell-the-good-parts/","previous":{"fields":{"slug":"/2016-02-14-shorter-posts/"},"frontmatter":{"title":"Shorter blog posts"}},"next":{"fields":{"slug":"/2016-03-16-apache-adding-a-new-site-in-under-two-minutes/"},"frontmatter":{"title":"Apache - adding a new site in under 2 minutes."}}}}