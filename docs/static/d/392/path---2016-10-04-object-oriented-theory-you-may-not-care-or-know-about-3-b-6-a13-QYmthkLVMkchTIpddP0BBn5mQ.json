{"data":{"site":{"siteMetadata":{"title":"Another Chris","author":"Chris Small"}},"markdownRemark":{"id":"6d324182-ff27-5605-b9db-80a0ecf752f7","excerpt":"The law of demeter A method   in a   should not send a message to another object unless that object is one of the following:  An instance variable used in the…","html":"<h3>The law of demeter</h3>\n<p>A method <code class=\"language-text\">m</code> in a <code class=\"language-text\">class A</code> should not send a message to another object unless that object is one of the following: </p>\n<ul>\n<li>An instance variable used in the method m; </li>\n<li>A parameter to the method m; </li>\n<li>An object created in the method m; </li>\n<li>A global variable (public static variable) used in the method m.</li>\n</ul>\n<p>One of the commonest examples is not exposing <code class=\"language-text\">List&lt;T&gt;</code> as properties, but <code class=\"language-text\">IEnumerable&lt;T&gt;</code> and providing methods to Add and Remove from the underlying list.</p>\n<h3>SOLID principles</h3>\n<p>I’ve asked about these so many times in interviews and I still can’t remember all the words behind the acronym - the point isn’t to memorise some words but rather understand the ideas behind them.\nThe most important parts (for me) are having a single responsibility for an object, IoC/DI and having many interfaces rather than just one.</p>\n<ul>\n<li><strong>S</strong>ingle responsibility. “Do one thing and do it well”</li>\n<li><strong>O</strong>pen/closed principle. Less important unless you are doing a lot with inheritence. Modification over extension of classes.</li>\n<li><strong>L</strong>iskov substitution principle. I’ve seen this abused with 8 class inheritence chains for a class ultimately is about performing a search. When abused, you end up unsure what the result of your override will do because of the mess above it.</li>\n<li><strong>I</strong>nterface Segregation Principle. This ties into single responsibility - an example of it going wrong is where you might implement an interface and be forced to put empty implementations for half the methods.</li>\n<li><strong>D</strong>epdency inversion principle. If you’re using a DI framework like Structuremap then you’ll be following this.</li>\n</ul>\n<h3>Forks and Cascades</h3>\n<p>I’ve deliberately avoid LINQ to remove any confusion:</p>\n<p><strong>Fork</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">var microsoft = new Company();\nPerson john = microsoft.GetPerson(&quot;john&quot;);\nint age = john.Age;</code></pre></div>\n<p><strong>Cascade</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  var microsoft = new Company();\n  Person john = microsoft.GetPerson(&quot;john&quot;);\n  int age = microsoft.GetAge(&quot;john&quot;);</code></pre></div>\n<h3>Inheritence vs Composition</h3>\n<p>Fairly self-explanatory: inheritence is inheriting from a base class while composition is allowing properties of your classes to be filled, e.g. <code class=\"language-text\">MyCompany.Person</code>. Most of the time you will use composition, and DI you get to use it via Setter injection, or constructor injection which then fill properties.</p>","frontmatter":{"title":"Object-oriented theory you may not care or know about, but are doing","date":"October 04, 2016","description":"Floating around in note form, I thought I'd write up a few principles that most good devs will already be doing, but unaware of their formal names in object-oriented theory."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2016-10-04-object-oriented-theory-you-may-not-care-or know-about/","previous":{"fields":{"slug":"/2016-09-09-podcast-of-the-month---sept-2016/"},"frontmatter":{"title":"Podcast of the month - Sept 2016"}},"next":{"fields":{"slug":"/2016-10-16-podcast-of-the-month-oct-2016/"},"frontmatter":{"title":"Podcast of the Month Oct 2016"}}}}