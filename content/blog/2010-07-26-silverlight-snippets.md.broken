---
title: Silverlight snippets
date: 2010-07-26 00:00:00 Z
permalink: "/silverlight/silverlight-snippets/"
tags:
- silverlight
Published: 2010-07-26 00:00:00 Z
author: Chris S
description: This is a collection of mostly simple/beginner level Silverlight snippets
  that will slowly build up over time. A lot of the answers here come thanks to the
  Silverlight tag on Stackoverflow and the Microsoft silverlight forums.
layout: post
dsq_thread_id:
- 1084003825
---

This is a collection of simple/beginner level Silverlight snippets that will slowly build up over time. A lot of the answers here come thanks to the [Silverlight tag][1] on Stackoverflow and the Microsoft silverlight forums.

<!--more-->

## Stretched line

Where you don't know a line's width, you can use the stretch property to make it fit its parent.

<pre>&lt;Line Stroke="#FF6565C1" StrokeDashArray="1 1" StrokeThickness="1" X1="0" Y1="0" X2="0" Y2="0" Stretch="Fill"/&gt;
</pre>

n.b. Fill doesn't work with lines.

### Dashed Line

For dashed lines you can't use the stretch trick above, so you're limited to specifying the width:

<pre>&lt;Line Stroke="#FF6565C1" StrokeDashArray="1 1" StrokeThickness="1" X1="0" Y1="0" X2="100" Y2="0"/&gt;</pre>

You can also achieve this with a Rectangle:

<pre>&lt;Rectangle Stroke="#FF6565C1" StrokeDashArray="1 1" StrokeThickness="1" Height="1"/&gt;</pre>

Setting the Fill property will fill the rectangle rather than give you a dashed line. One problem with using a Rectangle however is you get quite an ugly thick dashed line, as it has essentially draw 2 lines:

![Silverlight dashed rectangle][2]

### Updating an attached property in code

An attached property is one that references a parent control's property in XAML, for example the Canvas.Left and Canvas.Top properties below:

<pre>&lt;Canvas&gt;
&lt;TextBox Name="MyTextbox" Canvas.Left="100" Canvas.Top="100" Height="200" Width="1000"/&gt;
&lt;/Canvas&gt;
</pre>

You can set these properties in C# like so:

<pre>Canvas.SetTop(MyTextbox,100d);
// Alternative weak-typed method
MyTextbox.SetValue(Canvas.TopProperty, 100d);
</pre>

### Bind a ControlTemplate's control in the codebehind

This is done by overriding the ApplyTemplate method, and can't be done in the constructor as the tree doesn't exist at that point. You also need to use GetTemplateChild:

<pre>public class TemplatedControl1 : ContentControl
{
    private Button _button;
    public TemplatedControl1()
    {
        this.DefaultStyleKey = typeof(TemplatedControl1);
    }
    
    public override void OnApplyTemplate()
    {
        _button = (Button)GetTemplateChild("MyButton");
        _button.Click += new RoutedEventHandler(button_Click);
    }
    
    private void button_Click(object sender, RoutedEventArgs e)
    {
    }
}
</pre>

### Setting Image.Source in the codebehind

As the Image.Source property has its own converter in XAML, you can use a plain string. Inside C# it's a more long-winded:

<pre>Image image = (Image)GetTemplateChild("MyImage"); // or use FindName()
image.Source = new BitmapImage(new Uri("/MyNamespace;component/dolphin.png",UriKind.Relative));
</pre>

### Setting a TextBox to readonly without a grey background

In Silverlight 4 there is no control that allows you select text from a label, as you would on a HTML page. To get around this shortcoming you need to use a TextBox, set its IsReadOnly property to true. And then to get around the grey background issue, use the following style. This style ignores validation.

If you want underlined text or decorations you need to stick to the TextBlock control.

<pre>&lt;Style x:Key="ReadOnlyStyle" TargetType="TextBox"&gt;
&lt;Setter Property="BorderThickness" Value="0"/&gt;
&lt;Setter Property="Background" Value="#FFFFFFFF"/&gt;
&lt;Setter Property="Padding" Value="2"/&gt;
&lt;Setter Property="Template"&gt;
&lt;Setter.Value&gt;
&lt;ControlTemplate TargetType="TextBox"&gt;
&lt;Grid x:Name="RootElement"&gt;
&lt;vsm:VisualStateManager.VisualStateGroups&gt;
&lt;vsm:VisualStateGroup x:Name="CommonStates"&gt;
&lt;vsm:VisualState x:Name="Normal"/&gt;
&lt;vsm:VisualState x:Name="MouseOver"/&gt;
&lt;vsm:VisualState x:Name="Disabled" /&gt;
&lt;vsm:VisualState x:Name="ReadOnly"/&gt;
&lt;/vsm:VisualStateGroup&gt;
&lt;vsm:VisualStateGroup x:Name="FocusStates"&gt;
&lt;vsm:VisualState x:Name="Focused"&gt;
&lt;Storyboard&gt;
&lt;DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity"&gt;
&lt;SplineDoubleKeyFrame KeyTime="0" Value="1"/&gt;
&lt;/DoubleAnimationUsingKeyFrames&gt;
&lt;/Storyboard&gt;
&lt;/vsm:VisualState&gt;
&lt;vsm:VisualState x:Name="Unfocused"&gt;
&lt;Storyboard&gt;
&lt;DoubleAnimationUsingKeyFrames Storyboard.TargetName="FocusVisualElement" Storyboard.TargetProperty="Opacity"&gt;
&lt;SplineDoubleKeyFrame KeyTime="0" Value="0"/&gt;
&lt;/DoubleAnimationUsingKeyFrames&gt;
&lt;/Storyboard&gt;
&lt;/vsm:VisualState&gt;
&lt;/vsm:VisualStateGroup&gt;
&lt;/vsm:VisualStateManager.VisualStateGroups&gt;
&lt;Border x:Name="Border" Opacity="1" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1"&gt;
&lt;Grid&gt;
&lt;Border x:Name="MouseOverBorder" BorderBrush="Transparent" BorderThickness="1"&gt;
&lt;ScrollViewer x:Name="ContentElement" BorderThickness="0" IsTabStop="False" Padding="{TemplateBinding Padding}"/&gt;
&lt;/Border&gt;
&lt;/Grid&gt;
&lt;/Border&gt;
&lt;Border x:Name="DisabledVisualElement" IsHitTestVisible="False" Opacity="0" Background="#A5F7F7F7" BorderBrush="#A5F7F7F7" BorderThickness="{TemplateBinding BorderThickness}"/&gt;
&lt;Border x:Name="FocusVisualElement" Margin="1" IsHitTestVisible="False" Opacity="0" BorderBrush="#FF6DBDD1" BorderThickness="{TemplateBinding BorderThickness}"/&gt;
&lt;/Grid&gt;
&lt;/ControlTemplate&gt;
&lt;/Setter.Value&gt;
&lt;/Setter&gt;
&lt;/Style&gt;
</pre>

### Creating an animation in C#

<pre>Duration duration = new Duration(TimeSpan.FromMilliseconds(500));
DoubleAnimation animation = new DoubleAnimation();
animation.To = 100;
animation.Duration = duration;
//animation.EasingFunction = new QuadraticEase();
Storyboard storyBoard = new Storyboard();
storyBoard.Duration = duration;
storyBoard.Children.Add(animation);
Storyboard.SetTargetName(animation, "MyTextBox");
Storyboard.SetTargetProperty(animation, new PropertyPath("(Canvas.Top)"));
canvas1.Resources.Add("mysb", storyBoard);
storyBoard.Begin();
</pre>

### FlowDocuments and formatted text

Silverlight 4 doesn't support the [FlowDocumentReader][3] tag however you can get formatted text into a TextBlock and the new RichTextBox control using the same, slimmed down WPF syntax. I haven't been able to find a comprehensive list of supported tags, instead I've just used trial and error. The snippet below is based on the Regex tester from the tools section. There's a lot more information on [MSDN][4].

<pre>string formatted = "&lt;Run FontWeight='Bold' Foreground='Green'&gt;Some green bold text&lt;/Run&gt;";
string xaml = "&lt;UserControl " +
"xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  " +
"xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  " +
"xmlns:d="http://schemas.microsoft.com/expression/blend/2008" " +
"xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" " +
"xmlns:toolkit="clr-amespace:System.Windows.Controls;assembly=System.Windows.Controls.Toolkit"  " +
"xmlns:dataInput="clr-namespace:System.Windows.Controls;assembly=System.Windows.Controls.Data.Input"&gt;";
xaml += "&lt;ScrollViewer Height='130'&gt;&lt;TextBlock TextWrapping='Wrap' Width='300'&gt;" + formatted + "&lt;/TextBlock&gt;&lt;/ScrollViewer&gt;&lt;/UserControl&gt;";

// Add to a ContenControl
_contentControlOutput.Content = XamlReader.Load(xaml);
</pre>

### Adding linebreaks to a TextBlock (or RichTextBlock)

When you paste into either of these controls, newlines come up as r. To make these visible you need to use a <LineBreak/> control like so:

<pre>txt = txt.Replace("\r", "&lt;LineBreak/&gt;");</pre>

### Setting initParams and retrieving them

The initParams parameter for the <param> tag in your silverlight HTML host allows you to pass values into the silverlight control, in a querystring format.

<pre>&lt;object data="data:application/x-silverlight-2," type="application/x-silverlight-2" width="100%" Height="100%"&gt;
&lt;param name="source" value="my.xap"/&gt;
&lt;param name="onError" value="onSilverlightError" /&gt;
&lt;param name="background" value="white" /&gt;
&lt;param name="minRuntimeVersion" value="4.0.50401.0" /&gt;
&lt;param name="autoUpgrade" value="true" /&gt;
&lt;param name="initParams" value="name=bob&age=30&height=180" /&gt;
&lt;/object&gt;
</pre>

To retrieve them:

`gist:yetanotherchris/4957023`

### Uploading a file in Silverlight

This is a very basic example of uploading a file.

`gist:yetanotherchris/f81ef96c3c676544695b`

### Trapping keyboard modifiers (CTRL,SHIFT, ALT) keys in Silverlight textboxes

This isn't immediately obvious in the KeyDown and KeyUp events for a textbox, if you come from winforms. If you're looking for one of the keyboard modifiers it's found in the KeyBoard class as a static member:

<pre>void TextBoxKeyDown(object sender, KeyEventArgs e)
{
	if (Keyboard.Modifiers == ModifierKeys.Control && e.Key == Key.V)
		// Do something
}
</pre>

### Accessing the querystring in Silverlight

<pre>if (HtmlPage.Document.QueryString.ContainsKey("MyKey"))
string val = HtmlPage.Document.QueryString["MyKey"];
</pre>

### A borderless hyperlink

The HyperLinkButton by default draws a big blue box around itself when you press it. This is a usability cue for keyboard users but doesn't match the hyperlink you've grown to love in HTML. The big blob of XAML fixes this, simply style your hyperlink button:

`gist:yetanotherchris/4956978`

 [1]: http://stackoverflow.com/questions/tagged/silverlight
 [2]: /assets/2010/07/silverlightrectdashed.png
 [3]: http://msdn.microsoft.com/en-us/library/aa970909.aspx
 [4]: http://msdn.microsoft.com/en-us/library/ff426926(v=VS.96).aspx